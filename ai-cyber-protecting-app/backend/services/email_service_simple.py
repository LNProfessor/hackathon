"""
Simplified Email Service for AI Cyber Protecting App
Handles Red Zone alerts with console output (no complex SMTP imports)
"""
import os
import secrets
from datetime import datetime

def generate_security_code():
    """Generate a random 6-digit security code."""
    return f"{secrets.randbelow(900000) + 100000}"

def send_red_alert_email(user_location, risk_factors):
    """
    Send a Red Zone security alert (console output for demo).
    
    Args:
        user_location (dict): User's location information
        risk_factors (list): List of identified risk factors
    
    Returns:
        dict: Email sending result with success status and security code
    """
    try:
        # Generate security code
        security_code = generate_security_code()
        
        # Get email configuration from environment
        target_email = os.getenv('TARGET_EMAIL', 'user@example.com')
        
        # Format location info
        city = user_location.get('city', 'Unknown')
        coordinates = user_location.get('coordinates', {})
        lat = coordinates.get('latitude', 'N/A')
        lon = coordinates.get('longitude', 'N/A')
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Create email content
        subject = "üö® SECURITY ALERT: Red Zone Detected"
        
        # Print detailed alert to console
        print("\n" + "=" * 70)
        print("üö® RED ZONE SECURITY ALERT - EMAIL NOTIFICATION")
        print("=" * 70)
        print(f"üìß TO: {target_email}")
        print(f"üìã SUBJECT: {subject}")
        print(f"üïê TIME: {timestamp}")
        print(f"üî¢ SECURITY CODE: {security_code}")
        print("-" * 70)
        print("üìç LOCATION DETAILS:")
        print(f"   City: {city}")
        print(f"   Coordinates: {lat}, {lon}")
        if lat != 'N/A' and lon != 'N/A':
            print(f"   üó∫Ô∏è  Maps Link: https://maps.google.com/maps?q={lat},{lon}")
        print("-" * 70)
        print("‚ö†Ô∏è  RISK FACTORS DETECTED:")
        for i, factor in enumerate(risk_factors, 1):
            print(f"   {i}. {factor}")
        print("-" * 70)
        print("üõ°Ô∏è  IMMEDIATE ACTIONS REQUIRED:")
        print("   ‚úÖ Enable VPN immediately")
        print("   ‚úÖ Verify 2-Factor Authentication is active")
        print("   ‚úÖ Avoid accessing sensitive accounts")
        print("   ‚úÖ Consider relocating to a secure location")
        print("   ‚úÖ Keep all devices locked when not in use")
        print("-" * 70)
        print("‚ö° This alert was automatically generated by your AI Cyber Protection system.")
        print("   If you did not request this alert, contact support immediately.")
        print("=" * 70 + "\n")
        
        return {
            "success": True,
            "security_code": security_code,
            "message": "Red Zone alert displayed in console (simplified mode)",
            "email_sent": True,
            "alert_method": "console_output"
        }
        
    except Exception as e:
        print(f"‚ùå Email service error: {str(e)}")
        return {
            "success": False,
            "security_code": None,
            "message": f"Failed to process security alert: {str(e)}",
            "email_sent": False,
            "alert_method": "error"
        }
