"""
Email Service for AI Cyber Protecting App
Handles sending security alert emails for Red Zone incidents.
"""
import os
import smtplib
import secrets
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
from datetime import datetime

def generate_security_code():
    """Generate a random 6-digit security code."""
    return f"{secrets.randbelow(900000) + 100000}"

def send_red_alert_email(user_location, risk_factors):
    """
    Send a Red Zone security alert email.
    
    Args:
        user_location (dict): User's location information
        risk_factors (list): List of identified risk factors
    
    Returns:
        dict: Email sending result with success status and security code
    """
    try:
        # Generate security code
        security_code = generate_security_code()
        
        # Get email configuration from environment
        target_email = os.getenv('TARGET_EMAIL', 'user@example.com')
        smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        smtp_port = int(os.getenv('SMTP_PORT', 587))
        smtp_username = os.getenv('SMTP_USERNAME')
        smtp_password = os.getenv('SMTP_PASSWORD')
        
        # Create email content
        subject = "ðŸš¨ SECURITY ALERT: Red Zone Detected"
        
        # Format location info
        city = user_location.get('city', 'Unknown')
        lat = user_location.get('coordinates', {}).get('latitude', 'N/A')
        lon = user_location.get('coordinates', {}).get('longitude', 'N/A')
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Create HTML email body
        html_body = f"""
        <html>
        <body>
            <h2 style="color: #dc2626;">ðŸš¨ SECURITY ALERT</h2>
            <p><strong>Time:</strong> {timestamp}</p>
            <p><strong>Security Code:</strong> <span style="font-size: 18px; font-weight: bold; color: #dc2626;">{security_code}</span></p>
            
            <h3>Location Information:</h3>
            <ul>
                <li><strong>City:</strong> {city}</li>
                <li><strong>Coordinates:</strong> {lat}, {lon}</li>
                <li><strong>Maps Link:</strong> <a href="https://maps.google.com/maps?q={lat},{lon}">View on Google Maps</a></li>
            </ul>
            
            <h3>Risk Factors Detected:</h3>
            <ul>
        """
        
        for factor in risk_factors:
            html_body += f"<li>{factor}</li>"
        
        html_body += """
            </ul>
            
            <h3>Immediate Actions Required:</h3>
            <ul>
                <li>âœ… Enable VPN immediately</li>
                <li>âœ… Verify 2-Factor Authentication is active</li>
                <li>âœ… Avoid accessing sensitive accounts</li>
                <li>âœ… Consider relocating to a secure location</li>
            </ul>
            
            <p style="color: #dc2626; font-weight: bold;">
                This alert was automatically generated by your AI Cyber Protection system.
                If you did not request this alert, please contact support immediately.
            </p>
        </body>
        </html>
        """
        
        # Create plain text version
        text_body = f"""
SECURITY ALERT - Red Zone Detected

Time: {timestamp}
Security Code: {security_code}

Location Information:
- City: {city}
- Coordinates: {lat}, {lon}
- Maps Link: https://maps.google.com/maps?q={lat},{lon}

Risk Factors Detected:
"""
        for factor in risk_factors:
            text_body += f"- {factor}\n"
        
        text_body += """
Immediate Actions Required:
- Enable VPN immediately
- Verify 2-Factor Authentication is active
- Avoid accessing sensitive accounts
- Consider relocating to a secure location

This alert was automatically generated by your AI Cyber Protection system.
"""
        
        # For development/demo purposes, print to console instead of sending real email
        if not smtp_username or not smtp_password:
            print("=" * 60)
            print("ðŸ“§ RED ZONE ALERT EMAIL (CONSOLE OUTPUT FOR DEMO)")
            print("=" * 60)
            print(f"To: {target_email}")
            print(f"Subject: {subject}")
            print(f"Security Code: {security_code}")
            print("-" * 60)
            print(text_body)
            print("=" * 60)
            
            return {
                "success": True,
                "security_code": security_code,
                "message": "Alert email printed to console (demo mode)",
                "email_sent": True
            }
        
        # Send actual email if SMTP credentials are provided
        msg = MimeMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = smtp_username
        msg['To'] = target_email
        
        # Attach both plain text and HTML versions
        part1 = MimeText(text_body, 'plain')
        part2 = MimeText(html_body, 'html')
        msg.attach(part1)
        msg.attach(part2)
        
        # Send email
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(smtp_username, smtp_password)
            server.send_message(msg)
        
        return {
            "success": True,
            "security_code": security_code,
            "message": "Red Zone alert email sent successfully",
            "email_sent": True
        }
        
    except Exception as e:
        print(f"Email sending failed: {str(e)}")
        return {
            "success": False,
            "security_code": None,
            "message": f"Failed to send alert email: {str(e)}",
            "email_sent": False
        }
